<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<groupId>com.syscom</groupId>
	<artifactId>apps</artifactId>
	<version>1.0.0-SNAPSHOT</version>
	<packaging>pom</packaging>
	<name>apps</name>
	<description>apps</description>

	<modules>
		<module>apps-db-scripts</module>
		<module>apps-dao</module>
		<module>apps-business</module>
		<module>apps-models</module>
		<module>apps-web-service</module>
	</modules>

	<!-- The release process will interact with the Source Control of the project. 
		That's why we define the <scm> element here in our pom.xml -->
	<!-- <scm>
		<connection>scm:git:git@github.com:eleongithub/apps-api.git</connection>
		<url>scm:git:git@github.com:eleongithub/apps-api.git</url>
		<developerConnection>scm:git:git@github.com:eleongithub/apps-api.git</developerConnection>
	</scm> -->
	
	 <scm>
        <connection>scm:git:https://github.com/eleongithub/apps-api.git</connection>
        <developerConnection>scm:git:https://github.com/eleongithub/apps-api.git</developerConnection>
        <url>https://github.com/eleongithub/apps-api</url>
     </scm>
    
	<!-- In order for Maven to make release to a Nexus server, we define here 
		the repository information with <distributionManagement> element -->
	<distributionManagement>
		<repository>
			<id>nexus-releases</id>
			<name>Repository Nexus release</name>
			<url>http://192.168.1.97:9081/nexus/content/repositories/releases/</url>
		</repository>
		<snapshotRepository>
			<id>nexus-snapshots</id>
			<name>Repository Nexus snapshot</name>
			<url>http://192.168.1.97:9081/nexus/content/repositories/snapshots/</url>
		</snapshotRepository>
	</distributionManagement>
	    
    
	<properties>
		<project.encoding>UTF-8</project.encoding>
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
		<project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
		<java.version>1.8</java.version>
		<javax.servlet-api.version>3.1.0</javax.servlet-api.version>
		<tomcat.version>8.0.38</tomcat.version>
		<compile.source>1.8</compile.source>
		<compile.target>1.8</compile.target>
		<maven-compiler-plugin.version>3.3</maven-compiler-plugin.version>
		<maven-surefire-plugin.version>2.20</maven-surefire-plugin.version>
		<maven-failsafe-plugin.version>2.19.1</maven-failsafe-plugin.version>
		<jacoco-maven-plugin.version>0.7.9</jacoco-maven-plugin.version>
		<maven.compiler.target>1.8</maven.compiler.target>
		<maven.compiler.source>1.8</maven.compiler.source>
		<junit.version>4.12</junit.version>
		<dbmaintain.version>2.4</dbmaintain.version>
		<postgresql.version>9.4-1201-jdbc41</postgresql.version>
		<mybatis.version>3.3.0</mybatis.version>
		<mybatis-spring.version>1.2.3</mybatis-spring.version>
		<spring.version>4.2.6.RELEASE</spring.version>
		<spring-security.version>4.0.4.RELEASE</spring-security.version>
		<cxf.version>3.1.7</cxf.version>
		<commons-lang.version>3.4</commons-lang.version>
		<log4j.version>1.2.17</log4j.version>
		<apache-commons-codec.version>1.10</apache-commons-codec.version>
		<assertj.version>3.3.0</assertj.version>
		<jetty.version>9.4.0.M1</jetty.version>
		<apache-tika.version>1.11</apache-tika.version>
		<apache-common-io.version>2.4</apache-common-io.version>
		<apache-fileUpload.version>1.1.1</apache-fileUpload.version>
		<guava.version>19.0</guava.version>
		<codehaus-jackson.version>1.9.13</codehaus-jackson.version>
		<fasterxml-jackson.version>2.6.0</fasterxml-jackson.version>
		<aspectj.version>1.8.9</aspectj.version>
		<slf4j-version>1.7.21</slf4j-version>
		<apache-commons-collections>4.1</apache-commons-collections>
		<apache-commons-io-version>2.5</apache-commons-io-version>
		<javax-activation-version>1.1</javax-activation-version>

	    <sonar.language>java</sonar.language>
	    <!-- Tells Sonar to use jacoco for coverage results -->
	    <sonar.java.coveragePlugin>jacoco</sonar.java.coveragePlugin>
	    <sonar.core.codeCoveragePlugin>jacoco</sonar.core.codeCoveragePlugin>
	    <jacoco.version>0.7.9</jacoco.version>
	    <!-- The Sonar Jacoco Listener for JUnit to extract coverage details per test -->
	    <sonar-jacoco-listeners.version>3.2</sonar-jacoco-listeners.version>
	    <!-- Don't let Sonar execute tests. We will delegate it to Maven -->
	    <sonar.dynamicAnalysis>reuseReports</sonar.dynamicAnalysis>
	    <sonar.sourceEncoding>UTF-8</sonar.sourceEncoding>
    
<!-- 		<coverage.reports.dir>${basedir}/target/coverage-reports</coverage.reports.dir>
		<sonar.surefire.reportsPath>${project.build.directory}/surefire-reports</sonar.surefire.reportsPath>
    	<sonar.failsafe.reportsPath>${session.executionRootDirectory}/target/failsafe-reports</sonar.failsafe.reportsPath>
 -->		
 		<sonar.jacoco.reportPaths>${basedir}/target/jacoco.exec</sonar.jacoco.reportPaths>
		<!--<sonar.jacoco.reportPath>${coverage.reports.dir}/jacoco-unit.exec</sonar.jacoco.reportPath>-->
		<!-- <sonar.jacoco.itReportPath>${coverage.reports.dir}/jacoco-it.exec</sonar.jacoco.itReportPath>
		<sonar.jacoco.jar>${basedir}/lib/jacocoagent.jar</sonar.jacoco.jar> -->
	</properties>


	<dependencies>
		<dependency>
			<groupId>junit</groupId>
			<artifactId>junit</artifactId>
			<version>${junit.version}</version>
			<scope>test</scope>
		</dependency>

		<dependency>
			<groupId>org.apache.commons</groupId>
			<artifactId>commons-lang3</artifactId>
			<version>${commons-lang.version}</version>
		</dependency>
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-context</artifactId>
			<version>${spring.version}</version>
		</dependency>
		<dependency>
			<groupId>com.google.guava</groupId>
			<artifactId>guava</artifactId>
			<version>${guava.version}</version>
		</dependency>

		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-test</artifactId>
			<version>${spring.version}</version>
			<scope>test</scope>
		</dependency>

		<dependency>
			<groupId>org.assertj</groupId>
			<artifactId>assertj-core</artifactId>
			<version>${assertj.version}</version>
			<scope>test</scope>
		</dependency>
	</dependencies>


	<build>
		<plugins>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-compiler-plugin</artifactId>
				<version>${maven-compiler-plugin.version}</version>
				<configuration>
					<source>${compile.source}</source>
					<target>${compile.target}</target>
					<encoding>${project.build.sourceEncoding}</encoding>
				</configuration>
			</plugin>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-surefire-plugin</artifactId>
				<version>${maven-surefire-plugin.version}</version>
			</plugin>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-failsafe-plugin</artifactId>
				<version>${maven-failsafe-plugin.version}</version>
			</plugin>
		</plugins>
		<pluginManagement>
			<plugins>
				<plugin>
					<groupId>org.jacoco</groupId>
					<artifactId>jacoco-maven-plugin</artifactId>
					<version>${jacoco-maven-plugin.version}</version>
				</plugin>
			</plugins>
		</pluginManagement>
	</build>

	<profiles>
		<profile>
			<id>run-its</id> <!-- Definir un profile pour executer les tests -->
			<build>
				<plugins>
					<!-- Execution des tests unitaires -->
					<!-- <plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-surefire-plugin</artifactId>
						<configuration>
							<argLine>-Xms1024m -Xmx1024m -XX:PermSize=1024m</argLine>-Xms1024m -Xmx1024m -XX:PermSize=1024m -XX:MaxPermSize=1024m -javaagent:${sonar.jacoco.jar}=destfile=${sonar.jacoco.reportPath},includes=com.*
							<reportsDirectory>${sonar.surefire.reportsPath}</reportsDirectory>
							<includes>
								<include>**/*.class</include>
							</includes> -->
							<!-- <excludes>
                				<exclude>com/syscom/apps/integrationsTests/**/*.class</exclude>
              				</excludes> -->
						<!-- </configuration>
					</plugin> -->
					
					
					<!-- Execution des tests d'intÃ©gration == -->
					<!--<plugin>-->
						<!-- <groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-failsafe-plugin</artifactId>
						<configuration>
							<argLine>-Xmx1024m -XX:PermSize=1024m</argLine> --><!-- -javaagent:${sonar.jacoco.jar}=destfile=${sonar.jacoco.itReportPath} -->
							<!-- <reportsDirectory>${sonar.failsafe.reportsPath}</reportsDirectory>
							<includes>
								<include>**/*.class</include>
							</includes> -->
							<!-- <excludes>
								<exclude>com/syscom/apps/unitTests/**/*.class</exclude>
							</excludes> -->
						<!-- </configuration> -->
						<!-- Only run failsafe when required -->
						<!-- <executions>
							<execution>
								<id>integration-test</id>
								<phase>integration-test</phase>
								<goals>
									<goal>integration-test</goal>
									<goal>verify</goal>
								</goals>
							</execution>
						</executions> -->
					<!--</plugin> -->
					<plugin>
						<groupId>org.jacoco</groupId>
						<artifactId>jacoco-maven-plugin</artifactId>
						<version>${jacoco.version}</version>
						<executions>
							<execution>
                    			<id>default-prepare-agent</id>
                    			<goals><goal>prepare-agent</goal></goals>
                			</execution>
			                <execution>
			                    <id>default-report</id>
			                    <phase>prepare-package</phase>
			                    <goals><goal>report</goal></goals>
			                </execution>
            			</executions>
            			<configuration>
                			<destFile>${sonar.jacoco.reportPath}</destFile>
            			</configuration>
						
							<!--<execution>
								<id>prepare-unit-test-agent</id>
								<phase>process-test-classes</phase>
								<goals>
									<goal>prepare-agent</goal>
								</goals>
								<configuration>
									<destFile>${sonar.jacoco.reportPath}</destFile>
									<propertyName>jacoco.agent.ut.arg</propertyName>
									<append>true</append>
								</configuration>
							</execution>
							
							
							<execution>
								<id>prepare-integration-test-agent</id>
								<phase>pre-integration-test</phase>
								<goals>
									<goal>prepare-agent</goal>
								</goals>
								<configuration>
									<destFile>${sonar.jacoco.itReportPath}</destFile>
									<propertyName>jacoco.agent.it.arg</propertyName>
									<append>true</append>
								</configuration>
							</execution> 
						</executions>-->
					</plugin>
				</plugins>
			</build>
			<dependencies>
				<dependency>
					<groupId>org.codehaus.sonar-plugins.java</groupId>
					<artifactId>sonar-jacoco-listeners</artifactId>
					<version>${sonar-jacoco-listeners.version}</version>
					<scope>test</scope>
				</dependency>
			</dependencies>
		</profile>
	</profiles>


<!-- mvn clean compile  install -Prun-its -Dsonar.host.url=http://192.168.1.97:9000 sonar:sonar -->
</project>